@using AspnetcoreBlazorServerExample.Models
<div class="col-3">
    <div class="card card-block">
    <div class="card-body">
        <img class="card-img-top" src="@Item.Image" alt="Card image cap">
        <h5 class="card-title">@Item.Name</h5>
        <h6 class="card-subtitle mb-2 text-muted">@Item.Price</h6>
        <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
        @if (Item.Selected)
        {
            <button class="btn btn-primary" @onclick="ItemRemoved">Remove</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="ItemAdded">Add</button>
        }
        
    </div>
    </div>
</div>

@code {
    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public string Name { get; set; }
    [Parameter]
    public string Image { get; set; }
    [Parameter]
    public decimal Price { get; set; }
    [Parameter]
    public Item Item { get; set; }
    [Parameter]
    public Category Category { get; set; }
    [Parameter]
    public string Selected { get; set; }

    [Parameter]
    public EventCallback<string> SelectedChanged { get; set; }
    
    [Parameter]
    public List<Category> Categories { get; set; }

    [Parameter]
    public EventCallback<List<Category>> CategoriesChanged { get; set; }

    private Task ItemAdded()
    {
        Categories.Single(c => c.Id == Category.Id)?.SetSelected(Item.Id);

        //Categories[0].Items[0].Selected = true;

        return CategoriesChanged.InvokeAsync(Categories);

        return SelectedChanged.InvokeAsync("Selected 1");
    }

        private Task ItemRemoved()
    {
        Categories.Single(c => c.Id == Category.Id)?.SetRemoved(Item.Id);

        return CategoriesChanged.InvokeAsync(Categories);
    }
}